#BlueJ class context
comment0.target=AdjListsGraph
comment1.params=
comment1.target=AdjListsGraph()
comment1.text=\n\ Initiailze\ an\ empty\ graph.\n
comment10.params=vertex1\ vertex2
comment10.target=void\ removeArc(java.lang.Object,\ java.lang.Object)
comment10.text=\n\ Removes\ an\ arc\ between\ two\ vertices\ of\ this\ graph,\n\ if\ the\ vertices\ exist.\ Else\ it\ does\ not\ change\ the\ graph.\ \n
comment11.params=vertex
comment11.target=java.util.LinkedList\ getSuccessors(java.lang.Object)
comment11.text=\n\ Retrieve\ from\ a\ graph\ the\ vertices\ adjacent\ to\ vertex\ v.\n\ Assumes\ that\ the\ vertex\ is\ in\ the\ graph.\n
comment12.params=vertex
comment12.target=java.util.LinkedList\ getPredecessors(java.lang.Object)
comment12.text=\n\ Retrieve\ from\ a\ graph\ the\ vertices\ x\ preceding\ vertex\ v\ (x->v)\n\ and\ returns\ them\ onto\ a\ linked\ list.\ \n\ Assumes\ that\ the\ vertex\ is\ in\ the\ graph.\n
comment13.params=startVertex
comment13.target=java.util.LinkedList\ breadthFirstSearch(java.lang.Object)
comment13.text=\n\ Returns\ a\ list\ of\ paths\ to\ reach\ all\ nodes\ reachable\ from\ the\ start\ vertex.\n\ Assumes\ that\ startVertex\ is\ in\ this\ graph.\n\ \ \n\ @param\ startVertex\ Start\ point\ for\ the\ BFS\n\ @return\ a\ list\ of\ paths\ to\ all\ nodes\ reachable\ from\ startVertex\n
comment14.params=
comment14.target=java.lang.String\ toString()
comment14.text=\n\ Returns\ a\ string\ representation\ of\ the\ graph.\ \n
comment15.params=args
comment15.target=void\ main(java.lang.String[])
comment15.text=\n\ Very\ Basic\ Driver\ program.\ \n
comment2.params=
comment2.target=boolean\ isEmpty()
comment2.text=Returns\ true\ if\ this\ graph\ is\ empty,\ false\ otherwise.
comment3.params=
comment3.target=int\ getNumVertices()
comment3.text=Returns\ the\ number\ of\ vertices\ in\ this\ graph.
comment4.params=
comment4.target=int\ getNumArcs()
comment4.text=Returns\ the\ number\ of\ arcs\ in\ this\ graph.
comment5.params=
comment5.target=java.lang.Iterable\ getVertices()
comment5.text=Returns\ all\ the\ vertices\ of\ this\ graph\ as\ a\ vector.
comment6.params=vertex1\ vertex2
comment6.target=boolean\ isArc(java.lang.Object,\ java.lang.Object)
comment6.text=Returns\ true\ iff\ a\ directed\ edge\ exists\ between\ the\ given\ vertices
comment7.params=vertex
comment7.target=void\ addVertex(java.lang.Object)
comment7.text=\n\ Adds\ a\ vertex\ to\ this\ graph,\ associating\ object\ with\ vertex.\n\ If\ the\ vertex\ already\ exists,\ nothing\ is\ inserted.\n
comment8.params=vertex
comment8.target=void\ removeVertex(java.lang.Object)
comment8.text=\n\ Removes\ a\ single\ vertex\ with\ the\ given\ value\ from\ this\ graph.\n\ If\ the\ vertex\ does\ not\ exist,\ it\ does\ not\ change\ the\ graph.\n
comment9.params=source\ destination
comment9.target=void\ addArc(java.lang.Object,\ java.lang.Object)
comment9.text=\n\ Inserts\ an\ arc\ between\ two\ vertices\ of\ this\ graph,\n\ if\ the\ vertices\ exist.\ Else\ it\ does\ not\ change\ the\ graph.\n
numComments=16
